#map_canvas.cart_canvas
#bottom_canvas
  #explanation You are the orange dot, your customer is the blue dot
  = link_to "Mark Completed & Return", serve_summon_path(@summon), :class => "btnStyle orange btnReturn", :id => "finish_summon"
:javascript
  var currentSummonId;
  var sendTimeout = false;
  var myLatLng;
  $(document).ready(function(){
    $.ajax({
      type: "POST",
      url: '#{accept_summon_path(@summon)}',
      data: "cart_id=#{@cart_information}",
      cache: false,
      error: function(h){
        //Fail: Alert User, Ask to Try Again
        alert("Oops, we received an error!");
      }
    });
  });
  window.golfer = window.golfer || {
    map: function() {
      var  // get the page's canvas container
        mapCanvas = document.getElementById('map_canvas'),
        // define the Google Maps options
        map_options = {
          zoom: 15,
          // let's initially center on downtown Austin
          center: new google.maps.LatLng( 30.264664, -97.747378 ),
          mapTypeId: google.maps.MapTypeId.ROADMAP
        },
        // then create the map
        map = new google.maps.Map( mapCanvas, map_options ),

        myMarker = 0,
        customerMarker = 0,
        displayLocation = function( position ) {
          // create a new LatLng object for every position update
          myLatLng = new google.maps.LatLng( position.coords.latitude, position.coords.longitude );

          // build entire marker first time thru
          if ( !myMarker ) {
            // define our custom marker image
            var image = new google.maps.MarkerImage(
              '/orangedot_retina.png',
              null, // size
              null, // origin
              new google.maps.Point( 8, 8 ), // anchor (move to center of marker)
              new google.maps.Size( 17, 17 ) // scaled size (required for Retina display icon)
            );

            // then create the new marker
            myMarker = new google.maps.Marker({
              flat: true,
              icon: image,
              map: map,
              optimized: false,
              position: myLatLng,
              title: 'Cart Location',
              visible: true
            });

          // just change marker position on subsequent passes
          } else {
            myMarker.setPosition( myLatLng );
            // Update Summon Feed With Cart Location
            if (sendTimeout == false){
              sendCoordinates( myLatLng );
              sendTimeout = true;
              setTimeout(function(){ sendTimeout = false; }, 10000);
            }
          }

        },
        displayCustomerLocation = function( position ) {
          // create a new LatLng object for every position update
          cLatLng = new google.maps.LatLng( position.coords.latitude, position.coords.longitude );

          // build entire marker first time thru
          if ( !customerMarker ) {
            // define our custom marker image
            var image = new google.maps.MarkerImage(
              '/bluedot_retina.png',
              null, // size
              null, // origin
              new google.maps.Point( 8, 8 ), // anchor (move to center of marker)
              new google.maps.Size( 17, 17 ) // scaled size (required for Retina display icon)
            );

            // then create the new marker
            customerMarker = new google.maps.Marker({
              flat: true,
              icon: image,
              map: map,
              optimized: false,
              position: cLatLng,
              title: 'Your Location',
              visible: true
            });

          // just change marker position on subsequent passes
          } else {
            customerMarker.setPosition( cLatLng );
          }

          // center map view on every pass
          map.setCenter( cLatLng );
        },
        sendCoordinates = function ( position ) {
          $.ajax({
            type: "POST",
            url: "/course/cart/update/position",
            data: "summon_id="+#{@summon.id}+"&latitude="+position.Ra+"&longitude="+position.Sa+"&cart_id=#{@cart_information}",
            cache: false,
            success: function(r){
              console.log("Saved new coordinates");
            },
            error: function(h){
              //Fail: Alert User, Ask to Try Again
              console.log("Oops, we received an error updating location!");
            }
          });
        },
        handleError = function( error ) {
          var errorMessage = [ 
            'We are not quite sure what happened.',
            'Sorry. Permission to find your location has been denied.',
            'Sorry. Your position could not be determined.',
            'Sorry. Timed out.'
          ];

          console.log( errorMessage[ error.code ] );
        }
        
        data = { "coords": { "latitude" : #{@summon.latitude}, "longitude" : #{@summon.longitude} }}
        displayCustomerLocation(data);
            
        var summon_feed = pusher_connect.subscribe(#{@summon.course_id}+'_carts');
        summon_feed.bind('update_summon', function(data) {
          if (data.summon.id == #{@summon.id}){
            data = { "coords": { "latitude" : data.summon.latitude, "longitude" : data.summon.longitude }}
            displayCustomerLocation(data);
          }
        });
      
        // cache the userAgent
        useragent = navigator.userAgent;
        
      // allow iPhone or Android to track movement
      if ( useragent.indexOf('iPhone') !== -1 || useragent.indexOf('Android') !== -1 ) {
        navigator.geolocation.watchPosition( 
          displayLocation, 
          handleError, 
          { 
            enableHighAccuracy: true, 
            maximumAge: 30000, 
            timeout: 27000 
          }
        );      

      // or let other geolocation capable browsers to get their static position
      } else if ( navigator.geolocation ) {
        navigator.geolocation.getCurrentPosition( displayLocation, handleError );
      }
      
    }
  };